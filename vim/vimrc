" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:

"Vundle {
    filetype off                   " required!
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    source ~/.vim/bundles.vim
    filetype plugin indent on     " required!
"}

" Plugin Configuration {
    " BitKeeper {
        "map F6 to a command that will checkout the current file in Bitkeeper
        nmap <F6> :let bkout = system("bk edit " . expand("%:p"))<CR>:echo bkout<CR>

        :command -range Blame :!/home/usr/castor/bin/bkblame % <line1>
        "map F4 to taglist - opens up the tag list containing symbols
        nmap <F7> :Blame<CR>
    "}

    " Cscope {
        " Recurse until we hit the cscope db
        function! LoadCscope()
            let db = findfile("cscope.out", ".;")
            if (!empty(db))
                let path = strpart(db, 0, match(db, "/cscope.out$"))
                set nocscopeverbose " suppress 'duplicate connection' error
                exe "cs add " . db . " " . path
                set cscopeverbose
            endif
        endfunction

        " Look up the function underneath the cursor
        nmap <F5> :cs f s <C-R><C-W><CR>
    " }

    " CTags {
        set tags=./tags;/ " Recurse up untill we hit the tags
        map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
        map <C-P> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
    "}

    " NERD-Tree { 
        map <F1> :NERDTreeToggle <CR>
        let NERDTreeIgnore=['\SCCS$','\.o$', '\~$']
        let NERDTreeSortOrder=['\.c$', '\.h$', '*']
    "}

    " Supertab { 
        let g:SuperTabLongestHighlight = 1
        let g:SuperTabDefaultCompletionType = "<c-n>"
    "}

    " Tagbar {
        let g:tagbar_usearrows = 1
        map <F2> :TagbarToggle<CR>
    "}
"}

" Colorscheme { 
    set background=dark
    colorscheme mustang
    syntax on
"}

" Folding {
    set foldcolumn=0
    set fillchars=fold:\ 
    nnoremap <space> za
    vnoremap <space> zf
"}

" File type {
    au BufEnter /* call LoadCscope()
    augroup ft_c
        " au FileType c setlocal foldmethod=syntax 
        set omnifunc=syntaxcomplete#Complete
        let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
    augroup END
    autocmd FileType * if &ft != 'c' | let g:SuperTabDefaultCompletionType = "<c-n>" | endif
"}

" Omnicomplete {
    filetype plugin on
    filetype indent on
    let OmniCpp_GlobalScopeSearch   = 1
    let OmniCpp_DisplayMode         = 1
    let OmniCpp_ShowScopeInAbbr     = 0 "do not show namespace in pop-up
    let OmniCpp_ShowPrototypeInAbbr = 1 "show prototype in pop-up
    let OmniCpp_ShowAccess          = 1 "show access in pop-up
    let OmniCpp_SelectFirstItem     = 1 "select first item in pop-up
    let OmniCpp_MayCompleteDot      = 0 "Don't autocomplete after .
    let OmniCpp_MayCompleteArrow    = 0 "Don't autocomplete after ->
    let OmniCpp_MayCompleteScope    = 0 "Don't autocomplete after ::
    set completeopt=menuone,menu,longest
"}

"Search {
    set hlsearch        " Highlight the results
    set ignorecase      " Ignore the Search Case
    set incsearch       " Search as-I-Type
    set smartcase       " The will match The, the will match The or the
    set wrapscan        " Turn off the error when search hits EOF.
    " Enter clears search highlights
    nnoremap <CR> :nohlsearch<CR>/<BS>
"}

" System {
    set autochdir
    set backspace=indent,eol,start  " allow insert mode to delete 
    set directory=~/.vim/swap/      " hide swap files away 
    set encoding=utf-8              " utf-8 please
    set hidden                      " allows move between changed buffers
    set laststatus=2                " required by vim-powerline
    set mouse=a                     " Enable mouse everywhere
    set nocompatible                " be iMproved
    set splitbelow                  " split now opens on the bottom
    set splitright                  " vsplit now opens on the right
    set title                       " set the terminal title
    set t_Co=256                    " 256 Colors
    set viminfo='20,\"50            " Save info about recent file
"}

"Tabs, Spaces, and Wrapping {
    set autoindent
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set expandtab
    set smarttab
    set shiftround
    set textwidth=80
    set formatoptions=qrn1
    set nojoinspaces
    set smartindent
"}

" Wildmenu Completion {
    set wildmenu
    set wildmode=list:longest                       " Lets ignore some useless stuff
    set wildignore+=*.git                           " Version Control
    set wildignore+=*.o,*.so                        " complied objects
    set wildignore+=*.sw?                           " Vim swap files
"}

" Visual Cues {
    set cursorline      " Underline the line the cursor's on
    set nolist " Highlights blank space - may lead to madness
    set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:·
    set nostartofline   " Cursor keeps it's position
    set number          " Show Line Numbers
    set ruler           " Show Cursor position 
    set showbreak=↪     " For line wraps
    set showcmd         " Show the command 
    set showmatch       " Show matching braces
"}
